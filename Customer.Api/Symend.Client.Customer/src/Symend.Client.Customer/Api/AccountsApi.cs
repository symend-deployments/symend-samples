/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Symend.Client.Customer.Client;
using Symend.Client.Customer.Model;

namespace Symend.Client.Customer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create/Update Accounts
        /// </summary>
        /// <remarks>
        /// Creates an account or performs a partial update using its AccountKey as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseResultModel</returns>
        AccountResponseResultModel CreateUpdateAccount(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0);

        /// <summary>
        /// Create/Update Accounts
        /// </summary>
        /// <remarks>
        /// Creates an account or performs a partial update using its AccountKey as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseResultModel</returns>
        ApiResponse<AccountResponseResultModel> CreateUpdateAccountWithHttpInfo(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0);
        /// <summary>
        /// Get an Account by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific account using its GUID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountExtendedModelResultModel</returns>
        AccountExtendedModelResultModel GetAccount(Guid id, Guid xSymOrganizationId, int operationIndex = 0);

        /// <summary>
        /// Get an Account by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific account using its GUID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountExtendedModelResultModel</returns>
        ApiResponse<AccountExtendedModelResultModel> GetAccountWithHttpInfo(Guid id, Guid xSymOrganizationId, int operationIndex = 0);
        /// <summary>
        /// List Account Summary
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountSummarySearchResultGuidPagedModel</returns>
        AccountSummarySearchResultGuidPagedModel ListAccountSummary(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0);

        /// <summary>
        /// List Account Summary
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountSummarySearchResultGuidPagedModel</returns>
        ApiResponse<AccountSummarySearchResultGuidPagedModel> ListAccountSummaryWithHttpInfo(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0);
        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountSearchResultGuidPagedModel</returns>
        AccountSearchResultGuidPagedModel ListAccounts(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountSearchResultGuidPagedModel</returns>
        ApiResponse<AccountSearchResultGuidPagedModel> ListAccountsWithHttpInfo(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0);
        /// <summary>
        /// Update an Account
        /// </summary>
        /// <remarks>
        /// Performs a partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseResultModel</returns>
        AccountResponseResultModel UpdateAccount(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0);

        /// <summary>
        /// Update an Account
        /// </summary>
        /// <remarks>
        /// Performs a partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseResultModel</returns>
        ApiResponse<AccountResponseResultModel> UpdateAccountWithHttpInfo(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0);
        /// <summary>
        /// Update an Account synchronously
        /// </summary>
        /// <remarks>
        /// Performs a synchronous partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseResultModel</returns>
        AccountResponseResultModel UpdateAccountSync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0);

        /// <summary>
        /// Update an Account synchronously
        /// </summary>
        /// <remarks>
        /// Performs a synchronous partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseResultModel</returns>
        ApiResponse<AccountResponseResultModel> UpdateAccountSyncWithHttpInfo(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create/Update Accounts
        /// </summary>
        /// <remarks>
        /// Creates an account or performs a partial update using its AccountKey as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseResultModel</returns>
        System.Threading.Tasks.Task<AccountResponseResultModel> CreateUpdateAccountAsync(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Create/Update Accounts
        /// </summary>
        /// <remarks>
        /// Creates an account or performs a partial update using its AccountKey as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseResultModel>> CreateUpdateAccountWithHttpInfoAsync(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get an Account by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific account using its GUID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountExtendedModelResultModel</returns>
        System.Threading.Tasks.Task<AccountExtendedModelResultModel> GetAccountAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get an Account by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific account using its GUID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountExtendedModelResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountExtendedModelResultModel>> GetAccountWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Account Summary
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSummarySearchResultGuidPagedModel</returns>
        System.Threading.Tasks.Task<AccountSummarySearchResultGuidPagedModel> ListAccountSummaryAsync(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Account Summary
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSummarySearchResultGuidPagedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSummarySearchResultGuidPagedModel>> ListAccountSummaryWithHttpInfoAsync(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSearchResultGuidPagedModel</returns>
        System.Threading.Tasks.Task<AccountSearchResultGuidPagedModel> ListAccountsAsync(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// List Accounts
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSearchResultGuidPagedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountSearchResultGuidPagedModel>> ListAccountsWithHttpInfoAsync(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Account
        /// </summary>
        /// <remarks>
        /// Performs a partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseResultModel</returns>
        System.Threading.Tasks.Task<AccountResponseResultModel> UpdateAccountAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Account
        /// </summary>
        /// <remarks>
        /// Performs a partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseResultModel>> UpdateAccountWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an Account synchronously
        /// </summary>
        /// <remarks>
        /// Performs a synchronous partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseResultModel</returns>
        System.Threading.Tasks.Task<AccountResponseResultModel> UpdateAccountSyncAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an Account synchronously
        /// </summary>
        /// <remarks>
        /// Performs a synchronous partial update of an account using its GUID as lookup.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountResponseResultModel>> UpdateAccountSyncWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountsApi : IAccountsApiSync, IAccountsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountsApi : IAccountsApi
    {
        private Symend.Client.Customer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountsApi(string basePath)
        {
            this.Configuration = Symend.Client.Customer.Client.Configuration.MergeConfigurations(
                Symend.Client.Customer.Client.GlobalConfiguration.Instance,
                new Symend.Client.Customer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountsApi(Symend.Client.Customer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Symend.Client.Customer.Client.Configuration.MergeConfigurations(
                Symend.Client.Customer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountsApi(Symend.Client.Customer.Client.ISynchronousClient client, Symend.Client.Customer.Client.IAsynchronousClient asyncClient, Symend.Client.Customer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Symend.Client.Customer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Symend.Client.Customer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Symend.Client.Customer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Symend.Client.Customer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create/Update Accounts Creates an account or performs a partial update using its AccountKey as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseResultModel</returns>
        public AccountResponseResultModel CreateUpdateAccount(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> localVarResponse = CreateUpdateAccountWithHttpInfo(xSymOrganizationId, accountForm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Update Accounts Creates an account or performs a partial update using its AccountKey as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> CreateUpdateAccountWithHttpInfo(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter
            localVarRequestOptions.Data = accountForm;

            localVarRequestOptions.Operation = "AccountsApi.CreateUpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<AccountResponseResultModel>("/v1/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create/Update Accounts Creates an account or performs a partial update using its AccountKey as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseResultModel</returns>
        public async System.Threading.Tasks.Task<AccountResponseResultModel> CreateUpdateAccountAsync(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> localVarResponse = await CreateUpdateAccountWithHttpInfoAsync(xSymOrganizationId, accountForm, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create/Update Accounts Creates an account or performs a partial update using its AccountKey as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel>> CreateUpdateAccountWithHttpInfoAsync(Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter
            localVarRequestOptions.Data = accountForm;

            localVarRequestOptions.Operation = "AccountsApi.CreateUpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<AccountResponseResultModel>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Account by Id Returns a specific account using its GUID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountExtendedModelResultModel</returns>
        public AccountExtendedModelResultModel GetAccount(Guid id, Guid xSymOrganizationId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<AccountExtendedModelResultModel> localVarResponse = GetAccountWithHttpInfo(id, xSymOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Account by Id Returns a specific account using its GUID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountExtendedModelResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<AccountExtendedModelResultModel> GetAccountWithHttpInfo(Guid id, Guid xSymOrganizationId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "AccountsApi.GetAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountExtendedModelResultModel>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Account by Id Returns a specific account using its GUID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountExtendedModelResultModel</returns>
        public async System.Threading.Tasks.Task<AccountExtendedModelResultModel> GetAccountAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<AccountExtendedModelResultModel> localVarResponse = await GetAccountWithHttpInfoAsync(id, xSymOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Account by Id Returns a specific account using its GUID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountExtendedModelResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<AccountExtendedModelResultModel>> GetAccountWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "AccountsApi.GetAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountExtendedModelResultModel>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Account Summary Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountSummarySearchResultGuidPagedModel</returns>
        public AccountSummarySearchResultGuidPagedModel ListAccountSummary(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<AccountSummarySearchResultGuidPagedModel> localVarResponse = ListAccountSummaryWithHttpInfo(xSymOrganizationId, search, paging);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Account Summary Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountSummarySearchResultGuidPagedModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<AccountSummarySearchResultGuidPagedModel> ListAccountSummaryWithHttpInfo(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "AccountsApi.ListAccountSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountSummarySearchResultGuidPagedModel>("/v1/accounts/actions/get-summary-list", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Account Summary Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSummarySearchResultGuidPagedModel</returns>
        public async System.Threading.Tasks.Task<AccountSummarySearchResultGuidPagedModel> ListAccountSummaryAsync(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<AccountSummarySearchResultGuidPagedModel> localVarResponse = await ListAccountSummaryWithHttpInfoAsync(xSymOrganizationId, search, paging, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Account Summary Returns a paginated list of all accounts summary. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="search">Search Account Summary Parameter (optional)</param>
        /// <param name="paging">Cursor paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSummarySearchResultGuidPagedModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<AccountSummarySearchResultGuidPagedModel>> ListAccountSummaryWithHttpInfoAsync(Guid xSymOrganizationId, AccountSummarySearchCriteria search = default(AccountSummarySearchCriteria), CursorPagingCriteria paging = default(CursorPagingCriteria), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (search != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "search", search));
            }
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "AccountsApi.ListAccountSummary";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountSummarySearchResultGuidPagedModel>("/v1/accounts/actions/get-summary-list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccountSummary", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Accounts Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountSearchResultGuidPagedModel</returns>
        public AccountSearchResultGuidPagedModel ListAccounts(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<AccountSearchResultGuidPagedModel> localVarResponse = ListAccountsWithHttpInfo(xSymOrganizationId, accountKey, email, phone, limit, direction, orderByAttribute, orderByLastValue, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Accounts Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountSearchResultGuidPagedModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<AccountSearchResultGuidPagedModel> ListAccountsWithHttpInfo(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "AccountKey", accountKey));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Email", email));
            }
            if (phone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Phone", phone));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Limit", limit));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Direction", direction));
            }
            if (orderByAttribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.Attribute", orderByAttribute));
            }
            if (orderByLastValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.LastValue", orderByLastValue));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Cursor", cursor));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "AccountsApi.ListAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<AccountSearchResultGuidPagedModel>("/v1/accounts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Accounts Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountSearchResultGuidPagedModel</returns>
        public async System.Threading.Tasks.Task<AccountSearchResultGuidPagedModel> ListAccountsAsync(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<AccountSearchResultGuidPagedModel> localVarResponse = await ListAccountsWithHttpInfoAsync(xSymOrganizationId, accountKey, email, phone, limit, direction, orderByAttribute, orderByLastValue, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Accounts Returns a paginated list of all accounts. Optionally, searches within that list.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">Return an account with a specific account key (optional)</param>
        /// <param name="email">An email to search for within the accounts list (optional)</param>
        /// <param name="phone">A phone number to search for within the accounts list (optional)</param>
        /// <param name="limit">The maximum number of accounts to return per page, default 100. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The account attribute to sort the results by (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused (optional)</param>
        /// <param name="cursor">The ID of the last account on the previous page, leave empty to fetch first page (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountSearchResultGuidPagedModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<AccountSearchResultGuidPagedModel>> ListAccountsWithHttpInfoAsync(Guid xSymOrganizationId, string accountKey = default(string), string email = default(string), string phone = default(string), int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accountKey != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "AccountKey", accountKey));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Email", email));
            }
            if (phone != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Phone", phone));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Limit", limit));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Direction", direction));
            }
            if (orderByAttribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.Attribute", orderByAttribute));
            }
            if (orderByLastValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.LastValue", orderByLastValue));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Cursor", cursor));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "AccountsApi.ListAccounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AccountSearchResultGuidPagedModel>("/v1/accounts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAccounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Account Performs a partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseResultModel</returns>
        public AccountResponseResultModel UpdateAccount(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> localVarResponse = UpdateAccountWithHttpInfo(id, xSymOrganizationId, accountForm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Account Performs a partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> UpdateAccountWithHttpInfo(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter
            localVarRequestOptions.Data = accountForm;

            localVarRequestOptions.Operation = "AccountsApi.UpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AccountResponseResultModel>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Account Performs a partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseResultModel</returns>
        public async System.Threading.Tasks.Task<AccountResponseResultModel> UpdateAccountAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> localVarResponse = await UpdateAccountWithHttpInfoAsync(id, xSymOrganizationId, accountForm, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Account Performs a partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel>> UpdateAccountWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter
            localVarRequestOptions.Data = accountForm;

            localVarRequestOptions.Operation = "AccountsApi.UpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AccountResponseResultModel>("/v1/accounts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Account synchronously Performs a synchronous partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountResponseResultModel</returns>
        public AccountResponseResultModel UpdateAccountSync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> localVarResponse = UpdateAccountSyncWithHttpInfo(id, xSymOrganizationId, accountForm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Account synchronously Performs a synchronous partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountResponseResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> UpdateAccountSyncWithHttpInfo(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter
            localVarRequestOptions.Data = accountForm;

            localVarRequestOptions.Operation = "AccountsApi.UpdateAccountSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<AccountResponseResultModel>("/v1/accounts/{id}/actions/update-immediate", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Account synchronously Performs a synchronous partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountResponseResultModel</returns>
        public async System.Threading.Tasks.Task<AccountResponseResultModel> UpdateAccountSyncAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel> localVarResponse = await UpdateAccountSyncWithHttpInfoAsync(id, xSymOrganizationId, accountForm, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Account synchronously Performs a synchronous partial update of an account using its GUID as lookup.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Account Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountForm">Body contains list of properties which are key-value pairs. The keys are attribute IDs as seen in the data-target-defintions endpoint. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<AccountResponseResultModel>> UpdateAccountSyncWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, AccountForm accountForm = default(AccountForm), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter
            localVarRequestOptions.Data = accountForm;

            localVarRequestOptions.Operation = "AccountsApi.UpdateAccountSync";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<AccountResponseResultModel>("/v1/accounts/{id}/actions/update-immediate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountSync", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Symend.Client.Customer.Client;
using Symend.Client.Customer.Model;

namespace Symend.Client.Customer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerTrailApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This endpoint returns the attributes to the event id
        /// </summary>
        /// <remarks>
        /// This endpoint returns the associated to the event id
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventAttributeValueResultModel</returns>
        CustomerTrailEventAttributeValueResultModel GetAttributeValuesByEventId(string eventId, int operationIndex = 0);

        /// <summary>
        /// This endpoint returns the attributes to the event id
        /// </summary>
        /// <remarks>
        /// This endpoint returns the associated to the event id
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventAttributeValueResultModel</returns>
        ApiResponse<CustomerTrailEventAttributeValueResultModel> GetAttributeValuesByEventIdWithHttpInfo(string eventId, int operationIndex = 0);
        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModel</returns>
        CustomerTrailEventPagedModel GetCustomerEventsByAccountKey(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0);

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModel</returns>
        ApiResponse<CustomerTrailEventPagedModel> GetCustomerEventsByAccountKeyWithHttpInfo(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0);
        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModelV2</returns>
        CustomerTrailEventPagedModelV2 GetCustomerEventsByAccountKeyOrderByDateTime(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0);

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModelV2</returns>
        ApiResponse<CustomerTrailEventPagedModelV2> GetCustomerEventsByAccountKeyOrderByDateTimeWithHttpInfo(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0);
        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModel</returns>
        CustomerTrailEventPagedModel GetCustomerTrailEventsForAccount(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0);

        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModel</returns>
        ApiResponse<CustomerTrailEventPagedModel> GetCustomerTrailEventsForAccountWithHttpInfo(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0);
        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModelV2</returns>
        CustomerTrailEventPagedModelV2 GetCustomerTrailEventsForAccountPagedDateTime(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0);

        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModelV2</returns>
        ApiResponse<CustomerTrailEventPagedModelV2> GetCustomerTrailEventsForAccountPagedDateTimeWithHttpInfo(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0);
        /// <summary>
        /// Get Customer Trail options
        /// </summary>
        /// <remarks>
        /// Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailOptionModel</returns>
        CustomerTrailOptionModel GetCustomerTrailOptions(Guid xSymOrganizationId, int operationIndex = 0);

        /// <summary>
        /// Get Customer Trail options
        /// </summary>
        /// <remarks>
        /// Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailOptionModel</returns>
        ApiResponse<CustomerTrailOptionModel> GetCustomerTrailOptionsWithHttpInfo(Guid xSymOrganizationId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerTrailApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// This endpoint returns the attributes to the event id
        /// </summary>
        /// <remarks>
        /// This endpoint returns the associated to the event id
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventAttributeValueResultModel</returns>
        System.Threading.Tasks.Task<CustomerTrailEventAttributeValueResultModel> GetAttributeValuesByEventIdAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This endpoint returns the attributes to the event id
        /// </summary>
        /// <remarks>
        /// This endpoint returns the associated to the event id
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventAttributeValueResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerTrailEventAttributeValueResultModel>> GetAttributeValuesByEventIdWithHttpInfoAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModel</returns>
        System.Threading.Tasks.Task<CustomerTrailEventPagedModel> GetCustomerEventsByAccountKeyAsync(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerTrailEventPagedModel>> GetCustomerEventsByAccountKeyWithHttpInfoAsync(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModelV2</returns>
        System.Threading.Tasks.Task<CustomerTrailEventPagedModelV2> GetCustomerEventsByAccountKeyOrderByDateTimeAsync(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModelV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerTrailEventPagedModelV2>> GetCustomerEventsByAccountKeyOrderByDateTimeWithHttpInfoAsync(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModel</returns>
        System.Threading.Tasks.Task<CustomerTrailEventPagedModel> GetCustomerTrailEventsForAccountAsync(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerTrailEventPagedModel>> GetCustomerTrailEventsForAccountWithHttpInfoAsync(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModelV2</returns>
        System.Threading.Tasks.Task<CustomerTrailEventPagedModelV2> GetCustomerTrailEventsForAccountPagedDateTimeAsync(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer Trail events for an Account
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModelV2)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerTrailEventPagedModelV2>> GetCustomerTrailEventsForAccountPagedDateTimeWithHttpInfoAsync(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Customer Trail options
        /// </summary>
        /// <remarks>
        /// Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailOptionModel</returns>
        System.Threading.Tasks.Task<CustomerTrailOptionModel> GetCustomerTrailOptionsAsync(Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Customer Trail options
        /// </summary>
        /// <remarks>
        /// Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailOptionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomerTrailOptionModel>> GetCustomerTrailOptionsWithHttpInfoAsync(Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomerTrailApi : ICustomerTrailApiSync, ICustomerTrailApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomerTrailApi : ICustomerTrailApi
    {
        private Symend.Client.Customer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTrailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerTrailApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTrailApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomerTrailApi(string basePath)
        {
            this.Configuration = Symend.Client.Customer.Client.Configuration.MergeConfigurations(
                Symend.Client.Customer.Client.GlobalConfiguration.Instance,
                new Symend.Client.Customer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTrailApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomerTrailApi(Symend.Client.Customer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Symend.Client.Customer.Client.Configuration.MergeConfigurations(
                Symend.Client.Customer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerTrailApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomerTrailApi(Symend.Client.Customer.Client.ISynchronousClient client, Symend.Client.Customer.Client.IAsynchronousClient asyncClient, Symend.Client.Customer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Symend.Client.Customer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Symend.Client.Customer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Symend.Client.Customer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Symend.Client.Customer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// This endpoint returns the attributes to the event id This endpoint returns the associated to the event id
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventAttributeValueResultModel</returns>
        public CustomerTrailEventAttributeValueResultModel GetAttributeValuesByEventId(string eventId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventAttributeValueResultModel> localVarResponse = GetAttributeValuesByEventIdWithHttpInfo(eventId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns the attributes to the event id This endpoint returns the associated to the event id
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventAttributeValueResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventAttributeValueResultModel> GetAttributeValuesByEventIdWithHttpInfo(string eventId, int operationIndex = 0)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'eventId' when calling CustomerTrailApi->GetAttributeValuesByEventId");
            }

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetAttributeValuesByEventId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerTrailEventAttributeValueResultModel>("/v1/customer-trail-events/{eventId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributeValuesByEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// This endpoint returns the attributes to the event id This endpoint returns the associated to the event id
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventAttributeValueResultModel</returns>
        public async System.Threading.Tasks.Task<CustomerTrailEventAttributeValueResultModel> GetAttributeValuesByEventIdAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventAttributeValueResultModel> localVarResponse = await GetAttributeValuesByEventIdWithHttpInfoAsync(eventId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// This endpoint returns the attributes to the event id This endpoint returns the associated to the event id
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventAttributeValueResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventAttributeValueResultModel>> GetAttributeValuesByEventIdWithHttpInfoAsync(string eventId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'eventId' when calling CustomerTrailApi->GetAttributeValuesByEventId");
            }


            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("eventId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(eventId)); // path parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetAttributeValuesByEventId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerTrailEventAttributeValueResultModel>("/v1/customer-trail-events/{eventId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAttributeValuesByEventId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModel</returns>
        public CustomerTrailEventPagedModel GetCustomerEventsByAccountKey(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel> localVarResponse = GetCustomerEventsByAccountKeyWithHttpInfo(xSymOrganizationId, accountKey, searchParameter, paging);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel> GetCustomerEventsByAccountKeyWithHttpInfo(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0)
        {
            // verify the required parameter 'accountKey' is set
            if (accountKey == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'accountKey' when calling CustomerTrailApi->GetCustomerEventsByAccountKey");
            }

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "accountKey", accountKey));
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerEventsByAccountKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerTrailEventPagedModel>("/v1/accounts/customer-trail-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerEventsByAccountKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModel</returns>
        public async System.Threading.Tasks.Task<CustomerTrailEventPagedModel> GetCustomerEventsByAccountKeyAsync(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel> localVarResponse = await GetCustomerEventsByAccountKeyWithHttpInfoAsync(xSymOrganizationId, accountKey, searchParameter, paging, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel>> GetCustomerEventsByAccountKeyWithHttpInfoAsync(Guid xSymOrganizationId, string accountKey, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountKey' is set
            if (accountKey == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'accountKey' when calling CustomerTrailApi->GetCustomerEventsByAccountKey");
            }


            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "accountKey", accountKey));
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerEventsByAccountKey";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerTrailEventPagedModel>("/v1/accounts/customer-trail-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerEventsByAccountKey", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModelV2</returns>
        public CustomerTrailEventPagedModelV2 GetCustomerEventsByAccountKeyOrderByDateTime(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2> localVarResponse = GetCustomerEventsByAccountKeyOrderByDateTimeWithHttpInfo(xSymOrganizationId, accountKey, interval, paging, searchParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModelV2</returns>
        public Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2> GetCustomerEventsByAccountKeyOrderByDateTimeWithHttpInfo(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0)
        {
            // verify the required parameter 'accountKey' is set
            if (accountKey == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'accountKey' when calling CustomerTrailApi->GetCustomerEventsByAccountKeyOrderByDateTime");
            }

            // verify the required parameter 'interval' is set
            if (interval == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'interval' when calling CustomerTrailApi->GetCustomerEventsByAccountKeyOrderByDateTime");
            }

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "accountKey", accountKey));
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerEventsByAccountKeyOrderByDateTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerTrailEventPagedModelV2>("/v2/accounts/customer-trail-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerEventsByAccountKeyOrderByDateTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModelV2</returns>
        public async System.Threading.Tasks.Task<CustomerTrailEventPagedModelV2> GetCustomerEventsByAccountKeyOrderByDateTimeAsync(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2> localVarResponse = await GetCustomerEventsByAccountKeyOrderByDateTimeWithHttpInfoAsync(xSymOrganizationId, accountKey, interval, paging, searchParameter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account by Account Key Returns a detailed list of Customer Trail Events for a specific Account, by Account Key
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="accountKey">This is the account key to be used to return related customer trail events ordered by DateTime Descending</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModelV2)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2>> GetCustomerEventsByAccountKeyOrderByDateTimeWithHttpInfoAsync(Guid xSymOrganizationId, string accountKey, string interval, GuidPagedMetadata paging = default(GuidPagedMetadata), GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'accountKey' is set
            if (accountKey == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'accountKey' when calling CustomerTrailApi->GetCustomerEventsByAccountKeyOrderByDateTime");
            }

            // verify the required parameter 'interval' is set
            if (interval == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'interval' when calling CustomerTrailApi->GetCustomerEventsByAccountKeyOrderByDateTime");
            }


            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "accountKey", accountKey));
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerEventsByAccountKeyOrderByDateTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerTrailEventPagedModelV2>("/v2/accounts/customer-trail-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerEventsByAccountKeyOrderByDateTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModel</returns>
        public CustomerTrailEventPagedModel GetCustomerTrailEventsForAccount(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel> localVarResponse = GetCustomerTrailEventsForAccountWithHttpInfo(id, xSymOrganizationId, searchParameter, paging);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel> GetCustomerTrailEventsForAccountWithHttpInfo(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerTrailApi->GetCustomerTrailEventsForAccount");
            }

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerTrailEventsForAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerTrailEventPagedModel>("/v1/accounts/{id}/customer-trail-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerTrailEventsForAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModel</returns>
        public async System.Threading.Tasks.Task<CustomerTrailEventPagedModel> GetCustomerTrailEventsForAccountAsync(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel> localVarResponse = await GetCustomerTrailEventsForAccountWithHttpInfoAsync(id, xSymOrganizationId, searchParameter, paging, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="paging">Paging Criteria (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModel>> GetCustomerTrailEventsForAccountWithHttpInfoAsync(string id, Guid xSymOrganizationId, GetCustomerTrailEventsForAccountSearchParameterParameter searchParameter = default(GetCustomerTrailEventsForAccountSearchParameterParameter), GuidPagedMetadata paging = default(GuidPagedMetadata), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerTrailApi->GetCustomerTrailEventsForAccount");
            }


            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            if (paging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "paging", paging));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerTrailEventsForAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerTrailEventPagedModel>("/v1/accounts/{id}/customer-trail-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerTrailEventsForAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailEventPagedModelV2</returns>
        public CustomerTrailEventPagedModelV2 GetCustomerTrailEventsForAccountPagedDateTime(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2> localVarResponse = GetCustomerTrailEventsForAccountPagedDateTimeWithHttpInfo(id, xSymOrganizationId, interval, searchParameter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailEventPagedModelV2</returns>
        public Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2> GetCustomerTrailEventsForAccountPagedDateTimeWithHttpInfo(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerTrailApi->GetCustomerTrailEventsForAccountPagedDateTime");
            }

            // verify the required parameter 'interval' is set
            if (interval == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'interval' when calling CustomerTrailApi->GetCustomerTrailEventsForAccountPagedDateTime");
            }

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerTrailEventsForAccountPagedDateTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerTrailEventPagedModelV2>("/v2/accounts/{id}/customer-trail-events", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerTrailEventsForAccountPagedDateTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailEventPagedModelV2</returns>
        public async System.Threading.Tasks.Task<CustomerTrailEventPagedModelV2> GetCustomerTrailEventsForAccountPagedDateTimeAsync(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2> localVarResponse = await GetCustomerTrailEventsForAccountPagedDateTimeWithHttpInfoAsync(id, xSymOrganizationId, interval, searchParameter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail events for an Account Returns a detailed list of Customer Trail Events for a specific Account, by ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The GUID associated with the desired account</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="interval">The Datetime interval must be in the following format i.e.  2022-07-01T00:00/2022-07-15T00:00</param>
        /// <param name="searchParameter">Search Parameter (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailEventPagedModelV2)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<CustomerTrailEventPagedModelV2>> GetCustomerTrailEventsForAccountPagedDateTimeWithHttpInfoAsync(string id, Guid xSymOrganizationId, string interval, GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter searchParameter = default(GetCustomerEventsByAccountKeyOrderByDateTimeSearchParameterParameter), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'id' when calling CustomerTrailApi->GetCustomerTrailEventsForAccountPagedDateTime");
            }

            // verify the required parameter 'interval' is set
            if (interval == null)
            {
                throw new Symend.Client.Customer.Client.ApiException(400, "Missing required parameter 'interval' when calling CustomerTrailApi->GetCustomerTrailEventsForAccountPagedDateTime");
            }


            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (searchParameter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "searchParameter", searchParameter));
            }
            localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "interval", interval));
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerTrailEventsForAccountPagedDateTime";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerTrailEventPagedModelV2>("/v2/accounts/{id}/customer-trail-events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerTrailEventsForAccountPagedDateTime", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail options Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomerTrailOptionModel</returns>
        public CustomerTrailOptionModel GetCustomerTrailOptions(Guid xSymOrganizationId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailOptionModel> localVarResponse = GetCustomerTrailOptionsWithHttpInfo(xSymOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail options Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomerTrailOptionModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<CustomerTrailOptionModel> GetCustomerTrailOptionsWithHttpInfo(Guid xSymOrganizationId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerTrailOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomerTrailOptionModel>("/v1/customer-trail-options", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerTrailOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Customer Trail options Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomerTrailOptionModel</returns>
        public async System.Threading.Tasks.Task<CustomerTrailOptionModel> GetCustomerTrailOptionsAsync(Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<CustomerTrailOptionModel> localVarResponse = await GetCustomerTrailOptionsWithHttpInfoAsync(xSymOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Customer Trail options Get Customer Trail Options- Account Search Options (Search for a Customer Account by AccountId, AccountKey, Email, Phone) and Event Category Options (accountUpdates, emailActivities etc.).
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomerTrailOptionModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<CustomerTrailOptionModel>> GetCustomerTrailOptionsWithHttpInfoAsync(Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "CustomerTrailApi.GetCustomerTrailOptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomerTrailOptionModel>("/v1/customer-trail-options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomerTrailOptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Symend.Client.Customer.Client;
using Symend.Client.Customer.Model;

namespace Symend.Client.Customer.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISymPermViewSegmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a Segment by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SegmentModelResultModel</returns>
        SegmentModelResultModel GetSegment(Guid id, Guid xSymOrganizationId, int operationIndex = 0);

        /// <summary>
        /// Get a Segment by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SegmentModelResultModel</returns>
        ApiResponse<SegmentModelResultModel> GetSegmentWithHttpInfo(Guid id, Guid xSymOrganizationId, int operationIndex = 0);
        /// <summary>
        /// Get the current version of a Segment
        /// </summary>
        /// <remarks>
        /// Returns the latest revision of a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SegmentRevisionModelResultModel</returns>
        SegmentRevisionModelResultModel GetSegmentRevision(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0);

        /// <summary>
        /// Get the current version of a Segment
        /// </summary>
        /// <remarks>
        /// Returns the latest revision of a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SegmentRevisionModelResultModel</returns>
        ApiResponse<SegmentRevisionModelResultModel> GetSegmentRevisionWithHttpInfo(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0);
        /// <summary>
        /// List Segments
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all segments.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SegmentGuidPagedModel</returns>
        SegmentGuidPagedModel ListSegments(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0);

        /// <summary>
        /// List Segments
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all segments.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SegmentGuidPagedModel</returns>
        ApiResponse<SegmentGuidPagedModel> ListSegmentsWithHttpInfo(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISymPermViewSegmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a Segment by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentModelResultModel</returns>
        System.Threading.Tasks.Task<SegmentModelResultModel> GetSegmentAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a Segment by Id
        /// </summary>
        /// <remarks>
        /// Returns a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentModelResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SegmentModelResultModel>> GetSegmentWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the current version of a Segment
        /// </summary>
        /// <remarks>
        /// Returns the latest revision of a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentRevisionModelResultModel</returns>
        System.Threading.Tasks.Task<SegmentRevisionModelResultModel> GetSegmentRevisionAsync(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the current version of a Segment
        /// </summary>
        /// <remarks>
        /// Returns the latest revision of a specific segment by its ID.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentRevisionModelResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SegmentRevisionModelResultModel>> GetSegmentRevisionWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Segments
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all segments.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentGuidPagedModel</returns>
        System.Threading.Tasks.Task<SegmentGuidPagedModel> ListSegmentsAsync(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Segments
        /// </summary>
        /// <remarks>
        /// Returns a paginated list of all segments.
        /// </remarks>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentGuidPagedModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SegmentGuidPagedModel>> ListSegmentsWithHttpInfoAsync(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISymPermViewSegmentsApi : ISymPermViewSegmentsApiSync, ISymPermViewSegmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SymPermViewSegmentsApi : ISymPermViewSegmentsApi
    {
        private Symend.Client.Customer.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SymPermViewSegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SymPermViewSegmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SymPermViewSegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SymPermViewSegmentsApi(string basePath)
        {
            this.Configuration = Symend.Client.Customer.Client.Configuration.MergeConfigurations(
                Symend.Client.Customer.Client.GlobalConfiguration.Instance,
                new Symend.Client.Customer.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SymPermViewSegmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SymPermViewSegmentsApi(Symend.Client.Customer.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Symend.Client.Customer.Client.Configuration.MergeConfigurations(
                Symend.Client.Customer.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Symend.Client.Customer.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SymPermViewSegmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SymPermViewSegmentsApi(Symend.Client.Customer.Client.ISynchronousClient client, Symend.Client.Customer.Client.IAsynchronousClient asyncClient, Symend.Client.Customer.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Symend.Client.Customer.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Symend.Client.Customer.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Symend.Client.Customer.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Symend.Client.Customer.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Symend.Client.Customer.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a Segment by Id Returns a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SegmentModelResultModel</returns>
        public SegmentModelResultModel GetSegment(Guid id, Guid xSymOrganizationId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<SegmentModelResultModel> localVarResponse = GetSegmentWithHttpInfo(id, xSymOrganizationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Segment by Id Returns a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SegmentModelResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<SegmentModelResultModel> GetSegmentWithHttpInfo(Guid id, Guid xSymOrganizationId, int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "SymPermViewSegmentsApi.GetSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SegmentModelResultModel>("/v1/segments/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a Segment by Id Returns a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentModelResultModel</returns>
        public async System.Threading.Tasks.Task<SegmentModelResultModel> GetSegmentAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<SegmentModelResultModel> localVarResponse = await GetSegmentWithHttpInfoAsync(id, xSymOrganizationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a Segment by Id Returns a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentModelResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<SegmentModelResultModel>> GetSegmentWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "SymPermViewSegmentsApi.GetSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SegmentModelResultModel>("/v1/segments/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current version of a Segment Returns the latest revision of a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SegmentRevisionModelResultModel</returns>
        public SegmentRevisionModelResultModel GetSegmentRevision(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<SegmentRevisionModelResultModel> localVarResponse = GetSegmentRevisionWithHttpInfo(id, xSymOrganizationId, status);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current version of a Segment Returns the latest revision of a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SegmentRevisionModelResultModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<SegmentRevisionModelResultModel> GetSegmentRevisionWithHttpInfo(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "SymPermViewSegmentsApi.GetSegmentRevision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SegmentRevisionModelResultModel>("/v1/segments/{id}/current-revision", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentRevision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the current version of a Segment Returns the latest revision of a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentRevisionModelResultModel</returns>
        public async System.Threading.Tasks.Task<SegmentRevisionModelResultModel> GetSegmentRevisionAsync(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<SegmentRevisionModelResultModel> localVarResponse = await GetSegmentRevisionWithHttpInfoAsync(id, xSymOrganizationId, status, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the current version of a Segment Returns the latest revision of a specific segment by its ID.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Segment Id</param>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="status">Segment Status (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentRevisionModelResultModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<SegmentRevisionModelResultModel>> GetSegmentRevisionWithHttpInfoAsync(Guid id, Guid xSymOrganizationId, string status = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", Symend.Client.Customer.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "SymPermViewSegmentsApi.GetSegmentRevision";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SegmentRevisionModelResultModel>("/v1/segments/{id}/current-revision", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentRevision", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Segments Returns a paginated list of all segments.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SegmentGuidPagedModel</returns>
        public SegmentGuidPagedModel ListSegments(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.ApiResponse<SegmentGuidPagedModel> localVarResponse = ListSegmentsWithHttpInfo(xSymOrganizationId, limit, direction, orderByAttribute, orderByLastValue, cursor);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Segments Returns a paginated list of all segments.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SegmentGuidPagedModel</returns>
        public Symend.Client.Customer.Client.ApiResponse<SegmentGuidPagedModel> ListSegmentsWithHttpInfo(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0)
        {
            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Limit", limit));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Direction", direction));
            }
            if (orderByAttribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.Attribute", orderByAttribute));
            }
            if (orderByLastValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.LastValue", orderByLastValue));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Cursor", cursor));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "SymPermViewSegmentsApi.ListSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SegmentGuidPagedModel>("/v1/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Segments Returns a paginated list of all segments.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SegmentGuidPagedModel</returns>
        public async System.Threading.Tasks.Task<SegmentGuidPagedModel> ListSegmentsAsync(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Symend.Client.Customer.Client.ApiResponse<SegmentGuidPagedModel> localVarResponse = await ListSegmentsWithHttpInfoAsync(xSymOrganizationId, limit, direction, orderByAttribute, orderByLastValue, cursor, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Segments Returns a paginated list of all segments.
        /// </summary>
        /// <exception cref="Symend.Client.Customer.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xSymOrganizationId">Organization UUID of the client making the request</param>
        /// <param name="limit">The maximum number of segments per page. (optional)</param>
        /// <param name="direction">The ordering direction of the results, ascending (default) or descending (optional)</param>
        /// <param name="orderByAttribute">The segment attribute to sort the results by. (optional)</param>
        /// <param name="orderByLastValue">Inherited, unused. (optional)</param>
        /// <param name="cursor">The ID of the last segment on the previous page, leave empty to fetch first page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SegmentGuidPagedModel)</returns>
        public async System.Threading.Tasks.Task<Symend.Client.Customer.Client.ApiResponse<SegmentGuidPagedModel>> ListSegmentsWithHttpInfoAsync(Guid xSymOrganizationId, int? limit = default(int?), string direction = default(string), string orderByAttribute = default(string), string orderByLastValue = default(string), Guid? cursor = default(Guid?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Symend.Client.Customer.Client.RequestOptions localVarRequestOptions = new Symend.Client.Customer.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Symend.Client.Customer.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Symend.Client.Customer.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Limit", limit));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Direction", direction));
            }
            if (orderByAttribute != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.Attribute", orderByAttribute));
            }
            if (orderByLastValue != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "OrderBy.LastValue", orderByLastValue));
            }
            if (cursor != null)
            {
                localVarRequestOptions.QueryParameters.Add(Symend.Client.Customer.Client.ClientUtils.ParameterToMultiMap("", "Cursor", cursor));
            }
            localVarRequestOptions.HeaderParameters.Add("X-Sym-OrganizationId", Symend.Client.Customer.Client.ClientUtils.ParameterToString(xSymOrganizationId)); // header parameter

            localVarRequestOptions.Operation = "SymPermViewSegmentsApi.ListSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (JSON_Web_Token) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SegmentGuidPagedModel>("/v1/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

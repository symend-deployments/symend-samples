/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Symend.Client.Customer.Client.OpenAPIDateConverter;

namespace Symend.Client.Customer.Model
{
    /// <summary>
    /// CursorPagingCriteria
    /// </summary>
    [DataContract(Name = "CursorPagingCriteria")]
    public partial class CursorPagingCriteria : IEquatable<CursorPagingCriteria>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CursorPagingCriteria" /> class.
        /// </summary>
        /// <param name="limit">The max amount of records to get per-page. (default to 25).</param>
        /// <param name="after">The cursor value used for getting the next page of records. Can not be used at the same time as &#x60;before&#x60;..</param>
        /// <param name="before">The cursor value used for getting the previous page of records. Can not be used at the same time as &#x60;after&#x60;..</param>
        /// <param name="sort">The property name to sort the records by. Prefixed with &#x60;-&#x60; to sort by descending. (default to &quot;-updatedAt&quot;).</param>
        /// <param name="count">An optional parameter that will return the total count of records when &#x60;true&#x60;. (default to false).</param>
        public CursorPagingCriteria(int limit = 25, Guid? after = default(Guid?), Guid? before = default(Guid?), string sort = @"-updatedAt", bool count = false)
        {
            this.Limit = limit;
            this.After = after;
            this.Before = before;
            // use default value if no "sort" provided
            this.Sort = sort ?? @"-updatedAt";
            this.Count = count;
        }

        /// <summary>
        /// The max amount of records to get per-page.
        /// </summary>
        /// <value>The max amount of records to get per-page.</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// The cursor value used for getting the next page of records. Can not be used at the same time as &#x60;before&#x60;.
        /// </summary>
        /// <value>The cursor value used for getting the next page of records. Can not be used at the same time as &#x60;before&#x60;.</value>
        [DataMember(Name = "after", EmitDefaultValue = true)]
        public Guid? After { get; set; }

        /// <summary>
        /// The cursor value used for getting the previous page of records. Can not be used at the same time as &#x60;after&#x60;.
        /// </summary>
        /// <value>The cursor value used for getting the previous page of records. Can not be used at the same time as &#x60;after&#x60;.</value>
        [DataMember(Name = "before", EmitDefaultValue = true)]
        public Guid? Before { get; set; }

        /// <summary>
        /// The property name to sort the records by. Prefixed with &#x60;-&#x60; to sort by descending.
        /// </summary>
        /// <value>The property name to sort the records by. Prefixed with &#x60;-&#x60; to sort by descending.</value>
        [DataMember(Name = "sort", EmitDefaultValue = false)]
        public string Sort { get; set; }

        /// <summary>
        /// An optional parameter that will return the total count of records when &#x60;true&#x60;.
        /// </summary>
        /// <value>An optional parameter that will return the total count of records when &#x60;true&#x60;.</value>
        [DataMember(Name = "count", EmitDefaultValue = true)]
        public bool Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CursorPagingCriteria {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CursorPagingCriteria);
        }

        /// <summary>
        /// Returns true if CursorPagingCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of CursorPagingCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CursorPagingCriteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.After == input.After ||
                    (this.After != null &&
                    this.After.Equals(input.After))
                ) && 
                (
                    this.Before == input.Before ||
                    (this.Before != null &&
                    this.Before.Equals(input.Before))
                ) && 
                (
                    this.Sort == input.Sort ||
                    (this.Sort != null &&
                    this.Sort.Equals(input.Sort))
                ) && 
                (
                    this.Count == input.Count ||
                    this.Count.Equals(input.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.After != null)
                {
                    hashCode = (hashCode * 59) + this.After.GetHashCode();
                }
                if (this.Before != null)
                {
                    hashCode = (hashCode * 59) + this.Before.GetHashCode();
                }
                if (this.Sort != null)
                {
                    hashCode = (hashCode * 59) + this.Sort.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Count.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (int) maximum
            if (this.Limit > (int)1000)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value less than or equal to 1000.", new [] { "Limit" });
            }

            // Limit (int) minimum
            if (this.Limit < (int)0)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value greater than or equal to 0.", new [] { "Limit" });
            }

            yield break;
        }
    }

}

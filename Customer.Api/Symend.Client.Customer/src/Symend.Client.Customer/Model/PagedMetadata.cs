/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Symend.Client.Customer.Client.OpenAPIDateConverter;

namespace Symend.Client.Customer.Model
{
    /// <summary>
    /// PagedMetadata
    /// </summary>
    [DataContract(Name = "PagedMetadata")]
    public partial class PagedMetadata : IEquatable<PagedMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagedMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PagedMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PagedMetadata" /> class.
        /// </summary>
        /// <param name="limit">The maximum amount of records for a page. (required).</param>
        /// <param name="cursor">cursor.</param>
        /// <param name="after">The cursor value used for getting the next page of records. Null if there is no next page. (required).</param>
        /// <param name="before">The cursor value used for getting the previous page of records. Null if there is no previous page. (required).</param>
        /// <param name="total">The total amount of records in a data set. Null if total count was not requested. (required).</param>
        public PagedMetadata(int limit = default(int), string cursor = default(string), string after = default(string), string before = default(string), int? total = default(int?))
        {
            this.Limit = limit;
            // to ensure "after" is required (not null)
            if (after == null)
            {
                throw new ArgumentNullException("after is a required property for PagedMetadata and cannot be null");
            }
            this.After = after;
            // to ensure "before" is required (not null)
            if (before == null)
            {
                throw new ArgumentNullException("before is a required property for PagedMetadata and cannot be null");
            }
            this.Before = before;
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new ArgumentNullException("total is a required property for PagedMetadata and cannot be null");
            }
            this.Total = total;
            this.Cursor = cursor;
        }

        /// <summary>
        /// The maximum amount of records for a page.
        /// </summary>
        /// <value>The maximum amount of records for a page.</value>
        [DataMember(Name = "limit", IsRequired = true, EmitDefaultValue = true)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Cursor
        /// </summary>
        [DataMember(Name = "cursor", EmitDefaultValue = false)]
        [Obsolete]
        public string Cursor { get; set; }

        /// <summary>
        /// The cursor value used for getting the next page of records. Null if there is no next page.
        /// </summary>
        /// <value>The cursor value used for getting the next page of records. Null if there is no next page.</value>
        [DataMember(Name = "after", IsRequired = true, EmitDefaultValue = true)]
        public string After { get; set; }

        /// <summary>
        /// The cursor value used for getting the previous page of records. Null if there is no previous page.
        /// </summary>
        /// <value>The cursor value used for getting the previous page of records. Null if there is no previous page.</value>
        [DataMember(Name = "before", IsRequired = true, EmitDefaultValue = true)]
        public string Before { get; set; }

        /// <summary>
        /// The total amount of records in a data set. Null if total count was not requested.
        /// </summary>
        /// <value>The total amount of records in a data set. Null if total count was not requested.</value>
        [DataMember(Name = "total", IsRequired = true, EmitDefaultValue = true)]
        public int? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PagedMetadata {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Cursor: ").Append(Cursor).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PagedMetadata);
        }

        /// <summary>
        /// Returns true if PagedMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of PagedMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagedMetadata input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Cursor == input.Cursor ||
                    (this.Cursor != null &&
                    this.Cursor.Equals(input.Cursor))
                ) && 
                (
                    this.After == input.After ||
                    (this.After != null &&
                    this.After.Equals(input.After))
                ) && 
                (
                    this.Before == input.Before ||
                    (this.Before != null &&
                    this.Before.Equals(input.Before))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                if (this.Cursor != null)
                {
                    hashCode = (hashCode * 59) + this.Cursor.GetHashCode();
                }
                if (this.After != null)
                {
                    hashCode = (hashCode * 59) + this.After.GetHashCode();
                }
                if (this.Before != null)
                {
                    hashCode = (hashCode * 59) + this.Before.GetHashCode();
                }
                if (this.Total != null)
                {
                    hashCode = (hashCode * 59) + this.Total.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Symend.Client.Customer.Client.OpenAPIDateConverter;
using System.Reflection;

namespace Symend.Client.Customer.Model
{
    /// <summary>
    /// AccountFormAttributesInner
    /// </summary>
    [JsonConverter(typeof(AccountFormAttributesInnerJsonConverter))]
    [DataContract(Name = "AccountForm_attributes_inner")]
    public partial class AccountFormAttributesInner : AbstractOpenAPISchema, IEquatable<AccountFormAttributesInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeString" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeString.</param>
        public AccountFormAttributesInner(CustomerAttributeString actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeNumber" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeNumber.</param>
        public AccountFormAttributesInner(CustomerAttributeNumber actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeBoolean" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeBoolean.</param>
        public AccountFormAttributesInner(CustomerAttributeBoolean actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeGuid" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeGuid.</param>
        public AccountFormAttributesInner(CustomerAttributeGuid actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeDateTime" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeDateTime.</param>
        public AccountFormAttributesInner(CustomerAttributeDateTime actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeStringList" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeStringList.</param>
        public AccountFormAttributesInner(CustomerAttributeStringList actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeNumberList" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeNumberList.</param>
        public AccountFormAttributesInner(CustomerAttributeNumberList actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeDateTimeList" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeDateTimeList.</param>
        public AccountFormAttributesInner(CustomerAttributeDateTimeList actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeGuidList" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeGuidList.</param>
        public AccountFormAttributesInner(CustomerAttributeGuidList actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountFormAttributesInner" /> class
        /// with the <see cref="CustomerAttributeBooleanList" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomerAttributeBooleanList.</param>
        public AccountFormAttributesInner(CustomerAttributeBooleanList actualInstance)
        {
            IsNullable = false;
            SchemaType= "anyOf";
            ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CustomerAttributeBoolean))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeBooleanList))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeDateTime))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeDateTimeList))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeGuid))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeGuidList))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeNumber))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeNumberList))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeString))
                {
                    _actualInstance = value;
                }
                else if (value.GetType() == typeof(CustomerAttributeStringList))
                {
                    _actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CustomerAttributeBoolean, CustomerAttributeBooleanList, CustomerAttributeDateTime, CustomerAttributeDateTimeList, CustomerAttributeGuid, CustomerAttributeGuidList, CustomerAttributeNumber, CustomerAttributeNumberList, CustomerAttributeString, CustomerAttributeStringList");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeString`. If the actual instance is not `CustomerAttributeString`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeString</returns>
        public CustomerAttributeString GetCustomerAttributeString()
        {
            return (CustomerAttributeString)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeNumber`. If the actual instance is not `CustomerAttributeNumber`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeNumber</returns>
        public CustomerAttributeNumber GetCustomerAttributeNumber()
        {
            return (CustomerAttributeNumber)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeBoolean`. If the actual instance is not `CustomerAttributeBoolean`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeBoolean</returns>
        public CustomerAttributeBoolean GetCustomerAttributeBoolean()
        {
            return (CustomerAttributeBoolean)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeGuid`. If the actual instance is not `CustomerAttributeGuid`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeGuid</returns>
        public CustomerAttributeGuid GetCustomerAttributeGuid()
        {
            return (CustomerAttributeGuid)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeDateTime`. If the actual instance is not `CustomerAttributeDateTime`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeDateTime</returns>
        public CustomerAttributeDateTime GetCustomerAttributeDateTime()
        {
            return (CustomerAttributeDateTime)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeStringList`. If the actual instance is not `CustomerAttributeStringList`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeStringList</returns>
        public CustomerAttributeStringList GetCustomerAttributeStringList()
        {
            return (CustomerAttributeStringList)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeNumberList`. If the actual instance is not `CustomerAttributeNumberList`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeNumberList</returns>
        public CustomerAttributeNumberList GetCustomerAttributeNumberList()
        {
            return (CustomerAttributeNumberList)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeDateTimeList`. If the actual instance is not `CustomerAttributeDateTimeList`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeDateTimeList</returns>
        public CustomerAttributeDateTimeList GetCustomerAttributeDateTimeList()
        {
            return (CustomerAttributeDateTimeList)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeGuidList`. If the actual instance is not `CustomerAttributeGuidList`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeGuidList</returns>
        public CustomerAttributeGuidList GetCustomerAttributeGuidList()
        {
            return (CustomerAttributeGuidList)ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomerAttributeBooleanList`. If the actual instance is not `CustomerAttributeBooleanList`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomerAttributeBooleanList</returns>
        public CustomerAttributeBooleanList GetCustomerAttributeBooleanList()
        {
            return (CustomerAttributeBooleanList)ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountFormAttributesInner {\n");
            sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(ActualInstance, AccountFormAttributesInner.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of AccountFormAttributesInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of AccountFormAttributesInner</returns>
        public static AccountFormAttributesInner FromJson(string jsonString)
        {
            AccountFormAttributesInner newAccountFormAttributesInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newAccountFormAttributesInner;
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeBoolean>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeBoolean: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeBooleanList>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeBooleanList: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeDateTime>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeDateTime: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeDateTimeList>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeDateTimeList: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeGuid>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeGuid: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeGuidList>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeGuidList: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeNumber>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeNumber: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeNumberList>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeNumberList: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeString>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeString: {1}", jsonString, exception.ToString()));
            }

            try
            {
                newAccountFormAttributesInner = new AccountFormAttributesInner(JsonConvert.DeserializeObject<CustomerAttributeStringList>(jsonString, AccountFormAttributesInner.SerializerSettings));
                // deserialization is considered successful at this point if no exception has been thrown.
                return newAccountFormAttributesInner;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomerAttributeStringList: {1}", jsonString, exception.ToString()));
            }

            // no match found, throw an exception
            throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return Equals(input as AccountFormAttributesInner);
        }

        /// <summary>
        /// Returns true if AccountFormAttributesInner instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountFormAttributesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountFormAttributesInner input)
        {
            if (input == null)
                return false;

            return ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (ActualInstance != null)
                    hashCode = hashCode * 59 + ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for AccountFormAttributesInner
    /// </summary>
    public class AccountFormAttributesInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(AccountFormAttributesInner).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch(reader.TokenType) 
            {
                case JsonToken.StartObject:
                    return AccountFormAttributesInner.FromJson(JObject.Load(reader).ToString(Formatting.None));
                case JsonToken.StartArray:
                    return AccountFormAttributesInner.FromJson(JArray.Load(reader).ToString(Formatting.None));
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}

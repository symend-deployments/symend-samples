/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Symend.Client.Customer.Client.OpenAPIDateConverter;

namespace Symend.Client.Customer.Model
{
    /// <summary>
    /// Error model for non-success responses.
    /// </summary>
    [DataContract(Name = "Common_ErrorModel")]
    public partial class CommonErrorModel : IEquatable<CommonErrorModel>, IValidatableObject
    {
        /// <summary>
        /// The severity of the error. One of &#x60;critical&#x60;, &#x60;warning&#x60;, or &#x60;information&#x60;.
        /// </summary>
        /// <value>The severity of the error. One of &#x60;critical&#x60;, &#x60;warning&#x60;, or &#x60;information&#x60;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SeverityEnum
        {
            /// <summary>
            /// Enum Critical for value: critical
            /// </summary>
            [EnumMember(Value = "critical")]
            Critical = 1,

            /// <summary>
            /// Enum Warning for value: warning
            /// </summary>
            [EnumMember(Value = "warning")]
            Warning = 2,

            /// <summary>
            /// Enum Information for value: information
            /// </summary>
            [EnumMember(Value = "information")]
            Information = 3
        }


        /// <summary>
        /// The severity of the error. One of &#x60;critical&#x60;, &#x60;warning&#x60;, or &#x60;information&#x60;.
        /// </summary>
        /// <value>The severity of the error. One of &#x60;critical&#x60;, &#x60;warning&#x60;, or &#x60;information&#x60;.</value>
        [DataMember(Name = "severity", IsRequired = true, EmitDefaultValue = true)]
        public SeverityEnum Severity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonErrorModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommonErrorModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonErrorModel" /> class.
        /// </summary>
        /// <param name="code">Server-defined error code (required).</param>
        /// <param name="message">Human-readable representation of the error. (required).</param>
        /// <param name="severity">The severity of the error. One of &#x60;critical&#x60;, &#x60;warning&#x60;, or &#x60;information&#x60;. (required).</param>
        /// <param name="traceId">Distributed trace ID of the request..</param>
        /// <param name="details">details.</param>
        public CommonErrorModel(string code = default(string), string message = default(string), SeverityEnum severity = default(SeverityEnum), string traceId = default(string), List<CommonErrorDetail> details = default(List<CommonErrorDetail>))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for CommonErrorModel and cannot be null");
            }
            this.Code = code;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for CommonErrorModel and cannot be null");
            }
            this.Message = message;
            this.Severity = severity;
            this.TraceId = traceId;
            this.Details = details;
        }

        /// <summary>
        /// Server-defined error code
        /// </summary>
        /// <value>Server-defined error code</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// Human-readable representation of the error.
        /// </summary>
        /// <value>Human-readable representation of the error.</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Distributed trace ID of the request.
        /// </summary>
        /// <value>Distributed trace ID of the request.</value>
        [DataMember(Name = "traceId", EmitDefaultValue = false)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<CommonErrorDetail> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CommonErrorModel {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonErrorModel);
        }

        /// <summary>
        /// Returns true if CommonErrorModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonErrorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonErrorModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Severity == input.Severity ||
                    this.Severity.Equals(input.Severity)
                ) && 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Severity.GetHashCode();
                if (this.TraceId != null)
                {
                    hashCode = (hashCode * 59) + this.TraceId.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

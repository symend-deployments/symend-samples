/*
 * Customer Service API
 *
 * API for Customer Domain Operations
 *
 * The version of the OpenAPI document: v1
 * Contact: support@symend.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Symend.Client.Customer.Client.OpenAPIDateConverter;

namespace Symend.Client.Customer.Model
{
    /// <summary>
    /// DataTargetDefinitionDictionaryModel
    /// </summary>
    [DataContract(Name = "DataTargetDefinitionDictionaryModel")]
    public partial class DataTargetDefinitionDictionaryModel : IEquatable<DataTargetDefinitionDictionaryModel>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public DataTargetDefinitionDataType? DataType { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public DataTargetDefinitionCategory? Category { get; set; }

        /// <summary>
        /// Gets or Sets StructureType
        /// </summary>
        [DataMember(Name = "structureType", EmitDefaultValue = false)]
        public DataTargetDefinitionStructureType? StructureType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataTargetDefinitionDictionaryModel" /> class.
        /// </summary>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedBy">updatedBy.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="name">name.</param>
        /// <param name="dataType">dataType.</param>
        /// <param name="isPii">isPii.</param>
        /// <param name="isRequired">isRequired.</param>
        /// <param name="isCustom">isCustom.</param>
        /// <param name="category">category.</param>
        /// <param name="allowMapping">allowMapping.</param>
        /// <param name="isUniqueId">isUniqueId.</param>
        /// <param name="structureType">structureType.</param>
        /// <param name="description">description.</param>
        public DataTargetDefinitionDictionaryModel(UserModel createdBy = default(UserModel), DateTime createdAt = default(DateTime), UserModel updatedBy = default(UserModel), DateTime? updatedAt = default(DateTime?), string name = default(string), DataTargetDefinitionDataType? dataType = default(DataTargetDefinitionDataType?), bool isPii = default(bool), bool isRequired = default(bool), bool isCustom = default(bool), DataTargetDefinitionCategory? category = default(DataTargetDefinitionCategory?), bool allowMapping = default(bool), bool isUniqueId = default(bool), DataTargetDefinitionStructureType? structureType = default(DataTargetDefinitionStructureType?), string description = default(string))
        {
            this.CreatedBy = createdBy;
            this.CreatedAt = createdAt;
            this.UpdatedBy = updatedBy;
            this.UpdatedAt = updatedAt;
            this.Name = name;
            this.DataType = dataType;
            this.IsPii = isPii;
            this.IsRequired = isRequired;
            this.IsCustom = isCustom;
            this.Category = category;
            this.AllowMapping = allowMapping;
            this.IsUniqueId = isUniqueId;
            this.StructureType = structureType;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name = "createdBy", EmitDefaultValue = false)]
        public UserModel CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedBy
        /// </summary>
        [DataMember(Name = "updatedBy", EmitDefaultValue = false)]
        public UserModel UpdatedBy { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = true)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsPii
        /// </summary>
        [DataMember(Name = "isPii", EmitDefaultValue = true)]
        public bool IsPii { get; set; }

        /// <summary>
        /// Gets or Sets IsRequired
        /// </summary>
        [DataMember(Name = "isRequired", EmitDefaultValue = true)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// Gets or Sets IsCustom
        /// </summary>
        [DataMember(Name = "isCustom", EmitDefaultValue = true)]
        public bool IsCustom { get; set; }

        /// <summary>
        /// Gets or Sets AllowMapping
        /// </summary>
        [DataMember(Name = "allowMapping", EmitDefaultValue = true)]
        public bool AllowMapping { get; set; }

        /// <summary>
        /// Gets or Sets IsUniqueId
        /// </summary>
        [DataMember(Name = "isUniqueId", EmitDefaultValue = true)]
        public bool IsUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataTargetDefinitionDictionaryModel {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  IsPii: ").Append(IsPii).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsCustom: ").Append(IsCustom).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  AllowMapping: ").Append(AllowMapping).Append("\n");
            sb.Append("  IsUniqueId: ").Append(IsUniqueId).Append("\n");
            sb.Append("  StructureType: ").Append(StructureType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DataTargetDefinitionDictionaryModel);
        }

        /// <summary>
        /// Returns true if DataTargetDefinitionDictionaryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DataTargetDefinitionDictionaryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataTargetDefinitionDictionaryModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DataType == input.DataType ||
                    this.DataType.Equals(input.DataType)
                ) && 
                (
                    this.IsPii == input.IsPii ||
                    this.IsPii.Equals(input.IsPii)
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    this.IsRequired.Equals(input.IsRequired)
                ) && 
                (
                    this.IsCustom == input.IsCustom ||
                    this.IsCustom.Equals(input.IsCustom)
                ) && 
                (
                    this.Category == input.Category ||
                    this.Category.Equals(input.Category)
                ) && 
                (
                    this.AllowMapping == input.AllowMapping ||
                    this.AllowMapping.Equals(input.AllowMapping)
                ) && 
                (
                    this.IsUniqueId == input.IsUniqueId ||
                    this.IsUniqueId.Equals(input.IsUniqueId)
                ) && 
                (
                    this.StructureType == input.StructureType ||
                    this.StructureType.Equals(input.StructureType)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedBy.GetHashCode();
                }
                if (this.CreatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                }
                if (this.UpdatedBy != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedBy.GetHashCode();
                }
                if (this.UpdatedAt != null)
                {
                    hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                hashCode = (hashCode * 59) + this.IsPii.GetHashCode();
                hashCode = (hashCode * 59) + this.IsRequired.GetHashCode();
                hashCode = (hashCode * 59) + this.IsCustom.GetHashCode();
                hashCode = (hashCode * 59) + this.Category.GetHashCode();
                hashCode = (hashCode * 59) + this.AllowMapping.GetHashCode();
                hashCode = (hashCode * 59) + this.IsUniqueId.GetHashCode();
                hashCode = (hashCode * 59) + this.StructureType.GetHashCode();
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
